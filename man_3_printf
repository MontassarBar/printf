.\"_printf man page
.\"
.\"
.TH _PRINTF 3 "08 November 2021" "_printf Manuel"

.SH NAME
.SH ""

.B _printf

.SH SYNOPSIS
.SH ""

_printf() function takes 2 arguments: a character pointer to a string: format, \
and a 'variable arguments list': arg_list. _printf() loops through the format \
string searching for a conversion specifier, which is indicated with the '%' \
symbol. If found, the match_specifier() function loops through an array of \
structs (contianing character and function pairs) to find the specifier \
function that is matched with the given conversion specifier from the format \
string, and then returns a pointer to that paired function. _printf() uses the \
pointer to that specifier function to call the specifier function on the next \
queued argument from the arg_list. Each specifier function writes a character \
one at a time as determined from the value in arg_list.

.SS Compile

$ gcc -Wall -Werror -Wextra -pedantic *.c
.RE

.SS Usage
.RS

int _printf(const char *[FORMAT], ...);

FORMAT refers to a string with any number of specifiers followed by a '%' \
symbol. i.e. "My name is %s and I am %d years old". '...' refers to a list \
of variadic (variable arguments in C Language), which can be any number of \
variables of any type.

.SS Example
.RS

_printf("My name is %s and I am %d years old",)
.RE

.SH DESCRIPTION
.SH ""

The function _printf() writes output to standard output. It writes the output \
under the control of a format string that specifies how subsequent arguments \
are converted for output.

.SS Return Value

Upon successful return, these functions return an integer for the number of \
characters printed, which exclude the terminating null byte ('\0').



.SH "SEE ALSO"
.SH ""

.BR printf(3),


.SH "AUTHOR"


.SH ""

Mouna Ben Ali and Montassar Barbouchi

